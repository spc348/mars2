/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hw2;

import hw2.Operands.Instruction;
import hw2.Operands.PIPELINE_STAGE;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author cahn
 */
public class MainDisplay extends javax.swing.JFrame {

    private String instructionRaw = new String();
    private String[] instructionLines = new String[300];
    private final ArrayList<Instruction> instructions = new ArrayList<>();
    private int instructionIndex;
    public static final int REGISTER_TABLE_VALUE = 2;
    public static final int MEMORY_TABLE_VALUE = 1;
    private final String[][] memoryModelTable = new String[128][9];
    private final TableModel memoryModel;
    private int initialPcRow = 0;
    public final static String[] REGISTER_NAMES
            = {"$zero", "$at", "$v0", "$v1",
                "$a0", "$a1", "$a2", "$a3", "$t0",
                "$t1", "$t2", "$t3", "$t4", "$t5",
                "$t6", "$t7", "$s0", "$s1", "$s2",
                "$s3", "$s4", "$s5", "$s6",
                "$k0", "$k1", "$gp", "$sp",
                "$fp", "$ra", "pc", "hi", "lo"};
    public final static String[] REGISTER_VALUES = new String[REGISTER_NAMES.length];

    public final int EditPage = 0;
    public final int OpcodePage = 1;

    public int fetching = 0;
    public int decoding = 0;
    public int executing = 0;
    public int memorizing = 0;
    public int writing = 0;

    public HashMap<Instruction, Integer> registersInUse;

    /**
     * Creates new form MainDisplay
     */
    public MainDisplay() {
        memoryModel = CreateMemoryModel();
        initComponents();
        initModels();
        stepOneButton.setEnabled(false);
        runButton.setEnabled(false);

        for (int i = 0; i < REGISTER_VALUES.length; i++) {
            REGISTER_VALUES[i] = Integer.toBinaryString(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compileButton = new javax.swing.JButton();
        stepOneButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textEditor = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        codeModel = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        memoryTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        pipeline = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        registerBuffer = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        compileButton.setText("Compile");
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });

        stepOneButton.setText("Step One");
        stepOneButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stepOneButtonMouseClicked(evt);
            }
        });
        stepOneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepOneButtonActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        textEditor.setColumns(20);
        textEditor.setRows(5);
        textEditor.setText("add $t0 1 9\nadd $t1 0 16\naddr $t2 $t1 $t0\nsubr $t3 $t1 $t2");
        textEditor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textEditorKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(textEditor);

        jTabbedPane2.addTab("Edit", jScrollPane1);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        codeModel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Instructions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(codeModel);
        if (codeModel.getColumnModel().getColumnCount() > 0) {
            codeModel.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 200));

        memoryTable.setModel(memoryModel);
        jScrollPane3.setViewportView(memoryTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 740, 140));

        pipeline.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(pipeline);
        if (pipeline.getColumnModel().getColumnCount() > 0) {
            pipeline.getColumnModel().getColumn(1).setResizable(false);
            pipeline.getColumnModel().getColumn(2).setResizable(false);
            pipeline.getColumnModel().getColumn(3).setResizable(false);
            pipeline.getColumnModel().getColumn(4).setResizable(false);
            pipeline.getColumnModel().getColumn(5).setResizable(false);
            pipeline.getColumnModel().getColumn(6).setResizable(false);
            pipeline.getColumnModel().getColumn(7).setResizable(false);
            pipeline.getColumnModel().getColumn(8).setResizable(false);
            pipeline.getColumnModel().getColumn(9).setResizable(false);
            pipeline.getColumnModel().getColumn(10).setResizable(false);
            pipeline.getColumnModel().getColumn(11).setResizable(false);
            pipeline.getColumnModel().getColumn(12).setResizable(false);
            pipeline.getColumnModel().getColumn(13).setResizable(false);
            pipeline.getColumnModel().getColumn(14).setResizable(false);
            pipeline.getColumnModel().getColumn(15).setResizable(false);
            pipeline.getColumnModel().getColumn(16).setResizable(false);
            pipeline.getColumnModel().getColumn(17).setResizable(false);
            pipeline.getColumnModel().getColumn(18).setResizable(false);
            pipeline.getColumnModel().getColumn(19).setResizable(false);
            pipeline.getColumnModel().getColumn(20).setResizable(false);
            pipeline.getColumnModel().getColumn(21).setResizable(false);
            pipeline.getColumnModel().getColumn(22).setResizable(false);
            pipeline.getColumnModel().getColumn(23).setResizable(false);
            pipeline.getColumnModel().getColumn(24).setResizable(false);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 740, 270));

        jTabbedPane2.addTab("Execute", jPanel1);

        registerBuffer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Number", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        registerBuffer.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(registerBuffer);
        if (registerBuffer.getColumnModel().getColumnCount() > 0) {
            registerBuffer.getColumnModel().getColumn(0).setResizable(false);
            registerBuffer.getColumnModel().getColumn(1).setResizable(false);
            registerBuffer.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stepOneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(compileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(compileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepOneButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2)
                    .addComponent(jScrollPane5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
        Clear();
        initialPcRow = 0;
        instructionRaw = textEditor.getText();
        instructionLines = instructionRaw.split("\n");
        for (int i = 0; i < instructionLines.length; i++) {
            Instruction inst = new Instruction(instructionLines[i], registerBuffer, memoryTable, pipeline);
            instructions.add(inst);
            codeModel.getModel().setValueAt(inst.getInstructionString(), i, 0);
        }
        if (instructions.size() > 0) {
            stepOneButton.setEnabled(true);
            runButton.setEnabled(true);
        }
        jTabbedPane2.setSelectedIndex(OpcodePage);
    }//GEN-LAST:event_compileButtonActionPerformed

    private void Clear() {
        registersInUse.clear();
        instructionIndex = 0;
        fetching = 0;
        decoding = 0;
        executing = 0;
        memorizing = 0;
        writing = 0;
        instructions.clear();
        for (int i = 0; i < registerBuffer.getModel().getRowCount(); i++) {
            registerBuffer.getModel().setValueAt("0", i, REGISTER_TABLE_VALUE);
        }
        for (int i = 0; i < memoryTable.getModel().getRowCount(); i++) {
            for (int j = 1; j < memoryTable.getModel().getColumnCount(); j++) {
                memoryTable.getModel().setValueAt("0", i, j);
            }
        }
        for (int i = 0; i < codeModel.getModel().getRowCount(); i++) {
            codeModel.getModel().setValueAt("", i, 0);
        }
        for (int i = 0; i < pipeline.getRowCount(); i++) {
            for (int j = 0; j < pipeline.getColumnCount(); j++) {
                pipeline.getModel().setValueAt("", i, j);
            }
        }
    }

    private void stepOneButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stepOneButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_stepOneButtonMouseClicked

    private void stepOneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepOneButtonActionPerformed
//        if (instructionIndex < instructions.size()) {
//            Instruction inst = instructions.get(instructionIndex);
//            inst.setpcIndex(instructionIndex);
//            initial_pc_row++;
//            inst.setpcRow(initial_pc_row);
//            inst.incrementStage();
//            pipeline.getModel().setValueAt(inst.getStage(), inst.getpcrow(), inst.getpcindex());
//            if (inst.getIsWriteOperation()) {
//                memoryTable.getModel().setValueAt(inst.getResult(),
//                        inst.getDestination(), MEMORY_TABLE_VALUE);
//            } else {
//                registerBuffer.getModel().setValueAt(inst.getResult(),
//                        inst.getDestination(), REGISTER_TABLE_VALUE);
//            }
//            if (inst.isBounceInstruction()) {
//                updatePC(instructionIndex, inst);
//                int oldIndex = instructionIndex;
//                instructionIndex = inst.getBounceLocation();
//                if (oldIndex > instructionIndex) {
//                    for (int i = instructionIndex; i <= oldIndex; i++) {
//                        String old = codeModel.getModel().getValueAt(i, 0).toString();
//                        String replaced = old.replace("> ", "");
//                        codeModel.getModel().setValueAt(replaced, i, 0);
//                    }
//                }
//            } else if (instructionIndex + 1 < instructions.size()) {
//                instructionIndex++;
//                updatePC(instructionIndex - 1, inst);
//            } else {
//                updatePC(instructionIndex, inst);
//                stepOneButton.setEnabled(false);
//                runButton.setEnabled(false);
//            }
//        }
        for (instructionIndex = 0; instructionIndex < instructions.size(); instructionIndex++) {
            Instruction inst = instructions.get(instructionIndex);
            inst.setPcRow(instructionIndex);
            if (inst.getStage() == null && fetching < 1) {
                inst.setStage(PIPELINE_STAGE.F);
                inst.setPcIndex(instructionIndex);
                advance(inst);
                fetching += 1;
            } else if (inst.getStage() == PIPELINE_STAGE.F) {
                if (decoding < 1) {
                    inst.setStage(PIPELINE_STAGE.D);
                    fetching -= 1;
                    decoding += 1;
                    advance(inst);
                } else {
                    stall(inst);
                }
            } else if (inst.getStage() == PIPELINE_STAGE.D) {
                if (checkCanAdvance(inst) && executing < 1) {
                    inst.setStage(PIPELINE_STAGE.E);
                    reserveSourceRegisters(inst);
                    registerBuffer.getModel().setValueAt(inst.getResult(),
                            inst.getDestination(), REGISTER_TABLE_VALUE);
                    decoding -= 1;
                    executing += 1;
                    advance(inst);
                } else {
                    stall(inst);
                }
            } else if (inst.getStage() == PIPELINE_STAGE.E) {
                if (checkCanAdvance(inst) && memorizing < 1) {
                    inst.setStage(PIPELINE_STAGE.M);
                    releaseSourceRegisters(inst);
                    // not sure if this supposed to happen here
                    memoryTable.getModel().setValueAt(inst.getResult(),
                            inst.getDestination(), MEMORY_TABLE_VALUE);
                    executing -= 1;
                    memorizing += 1;
                    advance(inst);
                } else {
                    stall(inst);
                }
            } else if (inst.getStage() == PIPELINE_STAGE.M) {
                // determine who needs to write here
//                memoryTable.getModel().setValueAt(inst.getResult(),
//                        inst.getDestination(), MEMORY_TABLE_VALUE);
                if (checkCanAdvance(inst) && writing < 1) {
                    inst.setStage(PIPELINE_STAGE.W);
                    reserveDestination(inst);
                    memorizing -= 1;
                    writing += 1;
                    advance(inst);
                } else {
                    stall(inst);
                }
            } else if (inst.getStage() == PIPELINE_STAGE.W) {
                writing -= 1;
                releaseDestination(inst);
                if (registersInUse.containsKey(inst)) {
                    registersInUse.remove(inst);
                }
            }
        }
    }//GEN-LAST:event_stepOneButtonActionPerformed

    private void reserveSourceRegisters(Instruction inst) {
        if (inst.getSource1Reg() > 0) {
            registersInUse.put(inst, inst.getSource1Reg());
        }
        if (inst.getSource2Reg() > 0) {
            registersInUse.put(inst, inst.getSource2Reg());
        }
    }

    private void reserveDestination(Instruction inst) {
        if (inst.getDestReg() > 0) {
            registersInUse.put(inst, inst.getDestReg());
        }
    }

    private void releaseDestination(Instruction inst) {
        if (registersInUse.containsValue(inst.getDestReg())) {
            registersInUse.values().remove(inst.getDestReg());
        }
    }

    private boolean checkCanAdvance(Instruction inst) {
        if (registersInUse.isEmpty()) {
            return true;
        }
        boolean destRegBusy = registersInUse.containsValue(inst.getDestReg());
        if (destRegBusy) {
            System.out.println("Busy reg at " + inst.getDestReg());
        }
        boolean src1RegBusy = registersInUse.containsValue(inst.getSource1Reg());
        if (src1RegBusy) {
            System.out.println("Busy reg at " + inst.getSource1Reg());
        }
        boolean src2RegBusy = registersInUse.containsValue(inst.getSource2Reg());
        if (src2RegBusy) {
            System.out.println("Busy reg at " + inst.getSource2Reg());
        }
        return !destRegBusy && !src1RegBusy && !src2RegBusy;
    }

    private void advance(Instruction inst) {
        inst.incrementIndex();
        pipeline.getModel().setValueAt(inst.getStage(), instructionIndex, inst.getPcIndex());
        updatePC(instructionIndex, inst);
    }

    private void stall(Instruction inst) {
        inst.incrementIndex();
        pipeline.getModel().setValueAt("s", instructionIndex, inst.getPcIndex());
        updatePC(instructionIndex, inst);
    }

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        while (instructionIndex < instructions.size()) {
            Instruction inst = instructions.get(instructionIndex);
            if (inst.getIsWriteOperation()) {
                memoryTable.getModel().setValueAt(inst.getResult(),
                        inst.getDestination(), MEMORY_TABLE_VALUE);
            } else {
                registerBuffer.getModel().setValueAt(inst.getResult(),
                        inst.getDestination(), REGISTER_TABLE_VALUE);
            }
            if (inst.isBounceInstruction()) {
                updatePC(instructionIndex, inst);
                int oldIndex = instructionIndex;
                instructionIndex = inst.getBounceLocation();
                if (oldIndex > instructionIndex) {
                    for (int i = instructionIndex; i <= oldIndex; i++) {
                        String old = codeModel.getModel().getValueAt(i, 0).toString();
                        codeModel.getModel().setValueAt(old.replace("> ", ""), i, 0);
                    }
                }
            } else if (instructionIndex + 1 < instructions.size()) {
                updatePC(instructionIndex, inst);
                instructionIndex++;
            }
        }
        stepOneButton.setEnabled(false);
        runButton.setEnabled(false);
    }//GEN-LAST:event_runButtonActionPerformed

    private void textEditorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textEditorKeyTyped
        // EMPTY
    }//GEN-LAST:event_textEditorKeyTyped

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        Clear();
        jTabbedPane2.setSelectedIndex(EditPage);
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainDisplay.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JTable codeModel;
    private javax.swing.JButton compileButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable memoryTable;
    private javax.swing.JTable pipeline;
    public javax.swing.JTable registerBuffer;
    private javax.swing.JButton runButton;
    private javax.swing.JButton stepOneButton;
    private javax.swing.JTextArea textEditor;
    // End of variables declaration//GEN-END:variables

    private TableModel CreateMemoryModel() {
        TableModel model = new TableModel() {
            @Override
            public int getRowCount() {

                return memoryModelTable.length;
            }

            @Override
            public int getColumnCount() {
                return memoryModelTable[0].length;
            }

            String[] colNames = {"Address", "Value(+0)", "Value(+4)", "Value(+8)",
                "Value(+12)", "Value(+16)", "Value(+20)", "Value(+24)", "Value(+30)"};

            @Override
            public String getColumnName(int arg0) {
                return colNames[arg0];
            }

            @Override
            public Class<?> getColumnClass(int arg0) {
                return String.class;
            }

            @Override
            public boolean isCellEditable(int arg0, int arg1) {
                return false;
            }

            @Override
            public Object getValueAt(int arg0, int arg1) {
                return memoryModelTable[arg0][arg1];
            }

            @Override
            public void setValueAt(Object arg0, int arg1, int arg2) {
                memoryModelTable[arg1][arg2] = arg0.toString();
            }

            @Override
            public void addTableModelListener(TableModelListener arg0) {
                // Empty
            }

            @Override
            public void removeTableModelListener(TableModelListener arg0) {
                // Empty
            }
        };
        return model;
    }

    private void initModels() {
        for (int i = 0; i < registerBuffer.getModel().getRowCount(); i++) {
            registerBuffer.getModel().setValueAt(String.valueOf(i), i, REGISTER_TABLE_VALUE - 1);
            registerBuffer.getModel().setValueAt(REGISTER_NAMES[i], i, REGISTER_TABLE_VALUE - 2);
            registerBuffer.getModel().setValueAt("", i, REGISTER_TABLE_VALUE);
        }
        int memAddress = 0;
        for (int i = 0; i < memoryTable.getModel().getRowCount(); i++) {

            memoryTable.getModel().setValueAt(String.format("0x%1$08x", memAddress), i, MEMORY_TABLE_VALUE - 1);
            memAddress += 4;
        }
        for (int i = 0; i < pipeline.getRowCount(); i++) {
            for (int j = 0; j < pipeline.getColumnCount(); j++) {
                pipeline.getModel().setValueAt("", i, j);
            }
        }
        registersInUse = new HashMap();
    }

    private void updatePC(int index, Instruction inst) {
        registerBuffer.getModel().setValueAt(index, 29, REGISTER_TABLE_VALUE);
//        String old = codeModel.getModel().getValueAt(index, 0).toString();
//        codeModel.getModel().setValueAt("> " + old, index, 0);
        pipeline.getModel().setValueAt(inst.getInstructionName(), index, 0);
    }

    private void releaseSourceRegisters(Instruction inst) {
        if (registersInUse.containsValue(inst.getSource1Reg())) {
            registersInUse.values().remove(inst.getSource1Reg());
        }
        if (registersInUse.containsValue(inst.getSource2Reg())) {
            registersInUse.values().remove(inst.getSource2Reg());
        }
    }
}
